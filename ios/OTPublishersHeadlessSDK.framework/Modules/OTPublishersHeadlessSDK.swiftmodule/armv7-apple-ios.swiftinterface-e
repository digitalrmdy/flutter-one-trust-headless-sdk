// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OTPublishersHeadlessSDK
import Foundation
@_exported import OTPublishersHeadlessSDK
import Swift
import SystemConfiguration
import UIKit
public struct OTCoreConstants {
  public struct IABKeys {
    public static let consentCMPPresent: Swift.String
    public static let consentSubjectToGDPR: Swift.String
    public static let consentString: Swift.String
    public static let consentParsedPurposeConsents: Swift.String
    public static let consentParsedVendorConsents: Swift.String
  }
  public struct IAB_CCPA_Keys {
    public static let consentString: Swift.String
  }
}
@objc public enum OTCCPAGeolocation : Swift.Int {
  case all
  case us
  case ca
  public init?(value: Swift.String)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IabCcpaConsent : Swift.Int {
  case notApplicable
  case no
  case yes
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class OTSdkParams : ObjectiveC.NSObject {
  @objc public init(countryCode: Swift.String?, regionCode: Swift.String?)
  @objc public func setSDKVersion(_ sdkVersion: Swift.String)
  @objc public func setProfileSyncParams(_ crossDeviceParams: OTPublishersHeadlessSDK.OTProfileSyncParams)
  @objc public func setShouldCreateProfile(_ shouldCreateProfile: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class OTProfileSyncParams : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setSyncProfile(_ syncProfile: Swift.String)
  @objc public func setSyncProfileAuth(_ profileAuth: Swift.String)
  @objc public func setSyncGroupId(_ groupId: Swift.String)
  @objc public func setIdentifier(_ dsid: Swift.String)
  @objc public func setTenantId(_ tenantId: Swift.String)
  @objc deinit
}
@objc public class OTPublishersHeadlessSDK : ObjectiveC.NSObject {
  @objc public static let shared: OTPublishersHeadlessSDK.OTPublishersHeadlessSDK
  @objc public func initOTSDKData(storageLocation: Swift.String, domainIdentifier: Swift.String, languageCode: Swift.String, params: OTPublishersHeadlessSDK.OTSdkParams? = nil, completionHandler: @escaping ((Swift.Bool, Swift.Error?) -> Swift.Void))
  @objc public func shouldShowBanner() -> Swift.Bool
  @objc public func getDomainGroupData() -> [Swift.String : Any]?
  @objc public func getDomainInfo() -> [Swift.String : Any]?
  @objc public func getCommonData() -> [Swift.String : Any]?
  @objc public func updatePurposeConsent(forGroup groupId: Swift.String, consentValue: Swift.Bool)
  @objc public func updatePurposeLegitInterest(forGroup groupId: Swift.String, legIntValue: Swift.Bool)
  @objc public func getPurposeConsentLocal(forCustomGroupId customGroupId: Swift.String) -> Swift.Int8
  @objc public func getPurposeLegitInterestLocal(forCustomGroupId customGroupId: Swift.String) -> Swift.Int8
  @objc public func saveConsentValue()
  @objc public func getConsentStatus(forCategory categoryId: Swift.String) -> Swift.Int8
  @objc public func getConsentStatus(forSDKId SDKId: Swift.String) -> Swift.Int8
  @objc public func acceptAll()
  @objc public func rejectAll()
  @objc public func getUserLocation() -> OTPublishersHeadlessSDK.OTGeolocationModel
  @objc public func getOTSDKData() -> Swift.String?
  @objc public func overrideDataSubjectIdentifier(_ identifier: Swift.String)
  @objc public func setDataSubjectIdentifier(_ identifier: Swift.String)
  @objc public func getVendorListData() -> [Swift.String : Any]?
  @objc public func enableOTSDKLog(_ level: OTPublishersHeadlessSDK.OTLoggerConstant)
  @objc public func clearOTSDKData()
  @objc public func saveDefaultConsentValues()
  @objc public func resetUpdatedConsent()
  @objc public func setEnviroment(_ environment: Swift.String)
  @objc public func updateVendorConsent(vendorId: Swift.Int, consentStatus: Swift.Bool)
  @objc public func updateVendorLegitInterest(vendorId: Swift.Int, legIntStatus: Swift.Bool)
  @objc public func getVendorListUI() -> [Swift.String : Any]?
  @objc public func getVendorDetails(vendorId: Swift.Int) -> [Swift.String : Any]?
  @objc public func getBannerData() -> [Swift.String : Any]?
  @objc public func getPreferenceCenterData() -> [Swift.String : Any]?
  @objc public func setupUI(_ viewController: UIKit.UIViewController, UIType: OTPublishersHeadlessSDK.OTUIType = .none)
  @objc public func addEventListener(_ eventListener: Swift.AnyObject)
  @objc public func showBannerUI()
  @objc public func showPreferenceCenterUI()
  @objc public func initializeCCPA(categoryIDs: [Swift.String], geolocation: OTPublishersHeadlessSDK.OTCCPAGeolocation, explicitNotice: Swift.Bool, lsPact: Swift.Bool)
  @objc public func optOutOfSaleOfData()
  @objc public func optIntoSaleOfData()
  @objc public func writeLogsToFile(_ enable: Swift.Bool, debugLog enableVerbose: Swift.Bool = false)
  @objc public func setFetchDataURL(_ urlString: Swift.String)
  @objc public func updateAllVendorsConsentLocal(_ isSelected: Swift.Bool)
  @objc deinit
}
public struct OTUIKeys {
  public struct BannerKeys {
    public static let alertNoticeText: Swift.String
    public static let alertCloseText: Swift.String
    public static let alertMoreInfoText: Swift.String
    public static let cookieSettingButtonText: Swift.String
    public static let alertAllowCookiesText: Swift.String
    public static let bannerTitle: Swift.String
    public static let forceConsent: Swift.String
    public static let bannerPosition: Swift.String
    public static let bannerCloseButtonText: Swift.String
    public static let showBannerCloseButton: Swift.String
    public static let alertLayout: Swift.String
    public static let flat: Swift.String
    public static let floatingFlat: Swift.String
    public static let floatingRoundedCorner: Swift.String
    public static let floatingRoundedIcon: Swift.String
    public static let floatingRounded: Swift.String
    public static let centerRounded: Swift.String
    public static let bannerIABPartnersLink: Swift.String
    public static let bannerPurposeTitle: Swift.String
    public static let bannerPurposeDescription: Swift.String
    public static let bannerFeatureTitle: Swift.String
    public static let bannerAdditionalDescription: Swift.String
    public static let bannerAdditionalDescPlacement: Swift.String
    public static let bannerFeatureDescription: Swift.String
    public static let bannerShowRejectAllButton: Swift.String
    public static let bannerRejectAllButtonText: Swift.String
    public static let bannerDPDTitle: Swift.String
    public static let bannerDPDDescription: Swift.String
    public static let textColor: Swift.String
    public static let buttonColor: Swift.String
    public static let buttonTextColor: Swift.String
    public static let backgroundColor: Swift.String
    public static let bannerLinksTextColor: Swift.String
    public static let bannerLink: Swift.String
    public static let bannerLinkText: Swift.String
    public static let optanonLogo: Swift.String
    public static let showBannerAcceptButton: Swift.String
    public static let showBannerCookieSettings: Swift.String
    public static let isIabEnabled: Swift.String
  }
}
@objc public enum OTUIType : Swift.Int {
  case none = -1
  case banner = 0
  case preferenceCenter = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class OTIABTCFKeys : ObjectiveC.NSObject {
  @objc public static let iabTcf2CmpSdkId: Swift.String
  @objc public static let iabTcf2CmpSdkVersion: Swift.String
  @objc public static let iabTcf2PolicyVersion: Swift.String
  @objc public static let iabTcf2GdprApplies: Swift.String
  @objc public static let iabTcf2PublisherCC: Swift.String
  @objc public static let iabTcf2PurposeOneTreatment: Swift.String
  @objc public static let iabTcf2UseNonStandardStacks: Swift.String
  @objc public static let iabTcf2TCString: Swift.String
  @objc public static let iabTcf2VendorConsents: Swift.String
  @objc public static let iabTcf2VendorLegitimateInterests: Swift.String
  @objc public static let iabTcf2PurposeConsents: Swift.String
  @objc public static let iabTcf2PurposeLegitimateInterests: Swift.String
  @objc public static let iabTcf2SpecialFeaturesOptIns: Swift.String
  @objc public static let iabTcf2PublisherRestrictions: Swift.String
  @objc public static let iabTcf2PublisherConsent: Swift.String
  @objc public static let iabTcf2PublisherLegitimateInterests: Swift.String
  @objc public static let iabTcf2PublisherCustomPurposesConsents: Swift.String
  @objc public static let iabTcf2PublisherCustomPurposesLegitimateInterests: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class OTGeolocationModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var country: Swift.String {
    get
    }
  @objc public var state: Swift.String {
    get
    }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class OTUserDefaultKeys : ObjectiveC.NSObject {
  @objc public static let ottData: Swift.String
  @objc public static let userConsentStatus: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol OTEventListener {
  @objc optional func onShowBanner()
  @objc optional func onHideBanner()
  @objc optional func onBannerClickedAcceptAll()
  @objc optional func onBannerClickedRejectAll()
  @objc optional func onShowPreferenceCenter()
  @objc optional func onHidePreferenceCenter()
  @objc optional func onPreferenceCenterPurposeConsentChanged(purposeId: Swift.String, consentStatus: Swift.Int8)
  @objc optional func onPreferenceCenterAcceptAll()
  @objc optional func onPreferenceCenterRejectAll()
  @objc optional func onPreferenceCenterConfirmChoices()
  @objc optional func onPreferenceCenterPurposeLegitimateInterestChanged(purposeId: Swift.String, legitInterest: Swift.Int8)
  @objc optional func onShowVendorList()
  @objc optional func onHideVendorList()
  @objc optional func onVendorConfirmChoices()
  @objc optional func onVendorListVendorConsentChanged(vendorId: Swift.String, consentStatus: Swift.Int8)
  @objc optional func onVendorListVendorLegitimateInterestChanged(vendorId: Swift.String, legitInterest: Swift.Int8)
}
@objc public enum OTLoggerConstant : Swift.Int {
  case noLogs = -1
  case error = 1
  case warning = 2
  case info = 3
  case debug = 4
  case verbose = 5
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
extension OTPublishersHeadlessSDK.OTCCPAGeolocation : Swift.Equatable {}
extension OTPublishersHeadlessSDK.OTCCPAGeolocation : Swift.Hashable {}
extension OTPublishersHeadlessSDK.OTCCPAGeolocation : Swift.RawRepresentable {}
extension OTPublishersHeadlessSDK.IabCcpaConsent : Swift.Equatable {}
extension OTPublishersHeadlessSDK.IabCcpaConsent : Swift.Hashable {}
extension OTPublishersHeadlessSDK.IabCcpaConsent : Swift.RawRepresentable {}
extension OTPublishersHeadlessSDK.OTUIType : Swift.Hashable {}
extension OTPublishersHeadlessSDK.OTUIType : Swift.RawRepresentable {}
extension OTPublishersHeadlessSDK.OTLoggerConstant : Swift.Equatable {}
extension OTPublishersHeadlessSDK.OTLoggerConstant : Swift.Hashable {}
extension OTPublishersHeadlessSDK.OTLoggerConstant : Swift.RawRepresentable {}
