#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef OTPUBLISHERSHEADLESSSDK_SWIFT_H
#define OTPUBLISHERSHEADLESSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OTPublishersHeadlessSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum for IAB CCPA expected values
typedef SWIFT_ENUM(NSInteger, IabCcpaConsent, open) {
  IabCcpaConsentNotApplicable = 0,
  IabCcpaConsentNo = 1,
  IabCcpaConsentYes = 2,
};


/// Enum for OneTrust banner height
typedef SWIFT_ENUM(NSInteger, OTBannerHeightRatio, open) {
  OTBannerHeightRatioFull = 1,
  OTBannerHeightRatioTwo_third = 2,
  OTBannerHeightRatioOne_half = 3,
};

typedef SWIFT_ENUM(NSInteger, OTCCPAGeolocation, open) {
  OTCCPAGeolocationAll = 0,
  OTCCPAGeolocationUs = 1,
  OTCCPAGeolocationCa = 2,
};


SWIFT_PROTOCOL("_TtP23OTPublishersHeadlessSDK15OTEventListener_")
@protocol OTEventListener
@optional
- (void)onShowBanner;
- (void)onHideBanner;
- (void)onBannerClickedAcceptAll;
- (void)onBannerClickedRejectAll;
- (void)onShowPreferenceCenter;
- (void)onHidePreferenceCenter;
- (void)onPreferenceCenterPurposeConsentChangedWithPurposeId:(NSString * _Nonnull)purposeId consentStatus:(int8_t)consentStatus;
- (void)onPreferenceCenterAcceptAll;
- (void)onPreferenceCenterRejectAll;
- (void)onPreferenceCenterConfirmChoices;
- (void)onPreferenceCenterPurposeLegitimateInterestChangedWithPurposeId:(NSString * _Nonnull)purposeId legitInterest:(int8_t)legitInterest;
- (void)onShowVendorList;
- (void)onHideVendorList;
- (void)onVendorConfirmChoices;
- (void)onVendorListVendorConsentChangedWithVendorId:(NSString * _Nonnull)vendorId consentStatus:(int8_t)consentStatus;
- (void)onVendorListVendorLegitimateInterestChangedWithVendorId:(NSString * _Nonnull)vendorId legitInterest:(int8_t)legitInterest;
@end


SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK18OTGeolocationModel")
@interface OTGeolocationModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Struct for IAB 2.0 TCF UserDefaults keys
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK12OTIABTCFKeys")
@interface OTIABTCFKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkId;)
+ (NSString * _Nonnull)iabTcf2CmpSdkId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkVersion;)
+ (NSString * _Nonnull)iabTcf2CmpSdkVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PolicyVersion;)
+ (NSString * _Nonnull)iabTcf2PolicyVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2GdprApplies;)
+ (NSString * _Nonnull)iabTcf2GdprApplies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCC;)
+ (NSString * _Nonnull)iabTcf2PublisherCC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeOneTreatment;)
+ (NSString * _Nonnull)iabTcf2PurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2UseNonStandardStacks;)
+ (NSString * _Nonnull)iabTcf2UseNonStandardStacks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2TCString;)
+ (NSString * _Nonnull)iabTcf2TCString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorConsents;)
+ (NSString * _Nonnull)iabTcf2VendorConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2VendorLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeConsents;)
+ (NSString * _Nonnull)iabTcf2PurposeConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PurposeLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2SpecialFeaturesOptIns;)
+ (NSString * _Nonnull)iabTcf2SpecialFeaturesOptIns SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherRestrictions;)
+ (NSString * _Nonnull)iabTcf2PublisherRestrictions SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherConsent;)
+ (NSString * _Nonnull)iabTcf2PublisherConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesConsents;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum to keep a state of Log Levels
typedef SWIFT_ENUM(NSInteger, OTLoggerConstant, open) {
  OTLoggerConstantNoLogs = -1,
  OTLoggerConstantError = 1,
  OTLoggerConstantWarning = 2,
  OTLoggerConstantInfo = 3,
  OTLoggerConstantDebug = 4,
  OTLoggerConstantVerbose = 5,
};


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK19OTProfileSyncParams")
@interface OTProfileSyncParams : NSObject
/// Initializer for OTProfileSyncParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setSyncProfile:(NSString * _Nonnull)syncProfile;
/// Public function to pass sync profile auth.
/// \param profileAuth String containing sync profile auth.
///
- (void)setSyncProfileAuth:(NSString * _Nonnull)profileAuth;
/// Public function to set sync group identifier
/// \param groupId String containing sync group identifier.
///
- (void)setSyncGroupId:(NSString * _Nonnull)groupId;
/// Public function to set data subject identifier
/// \param dsid String containing data subject identifier.
///
- (void)setIdentifier:(NSString * _Nonnull)dsid;
/// Public function to set tenant Id
/// \param tenantId tenantId as String value
///
- (void)setTenantId:(NSString * _Nonnull)tenantId;
@end

@class OTSdkParams;
@class UIViewController;
enum OTUIType : NSInteger;

SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK23OTPublishersHeadlessSDK")
@interface OTPublishersHeadlessSDK : NSObject
/// Shared public var to get OneTrust publisher Headless SDK instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OTPublishersHeadlessSDK * _Nonnull shared;)
+ (OTPublishersHeadlessSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Function to fetch data to required to create native OT banner
/// \param storageLocation String containing storage location from where data has to be fetched.
///
/// \param domainIdentifier String containing unique Domain Identifier to be passed. As: “5376c4e0-8367-450c-8669-a0d41bed69ac”
///
/// \param languageCode String containing valid ISO Language code for langauge for which localized data has be fetched. As: “en”
///
/// \param params value containing OTSdkParams optional type for additional SDK parameters like country code and region code
///
/// \param completionHandler Completion Handler containing a Boolean and Error signifying if SDK initialization was successful or not. Error in case initialization failed.
/// Completion will return false status if there is internet connectivity issues, invalid storage url, invalid domain Identifier or invalid language code is passed.
///
- (void)initOTSDKDataWithStorageLocation:(NSString * _Nonnull)storageLocation domainIdentifier:(NSString * _Nonnull)domainIdentifier languageCode:(NSString * _Nonnull)languageCode params:(OTSdkParams * _Nullable)params completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler SWIFT_METHOD_FAMILY(none);
/// Function to signify if banner should be displayed for user location or not.
///
/// returns:
/// Return boolean true if banner should be shown else false.
- (BOOL)shouldShowBanner SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain Data.
///
/// returns:
/// Domain Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainGroupData SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain info.
///
/// returns:
/// Domain dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainInfo SWIFT_WARN_UNUSED_RESULT;
/// Function to get the Common Data.
///
/// returns:
/// Common Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getCommonData SWIFT_WARN_UNUSED_RESULT;
/// Function to update consent value for specified group Identifier.
/// \param groupId String Group Id for which consent value has to be updated.
///
/// \param consentValue Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updatePurposeConsentForGroup:(NSString * _Nonnull)groupId consentValue:(BOOL)consentValue;
/// Function to update legitimate interest value for specified group Identifier.
/// \param groupId String Category Id for which legitimate interest value has to be updated.
///
/// \param legIntValue Boolean value specifying updated legitimate interest value. Permissible values : true or false.
///
- (void)updatePurposeLegitInterestForGroup:(NSString * _Nonnull)groupId legIntValue:(BOOL)legIntValue;
/// Function to get consent value for specified group identifier.
/// \param customGroupId String Purpose Id for which consent value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeConsentLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to get legitimate interest value for specified group identifier.
/// \param customGroupId String Purpose Id for which legitimate interest value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeLegitInterestLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to persist in memory-data to UserDefaults. Confirm my Choices.
- (void)saveConsentValue;
/// Public function to get consent value for specified category Identifier. It will return nil in case of application supplied category id doesn’t exist.
/// \param categoryId String Category Id for which value has to be return.
///
- (int8_t)getConsentStatusForCategory:(NSString * _Nonnull)categoryId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified SDK Identifier. It will return nil in case of application supplied SDK id doesn’t exist.
/// \param SDKId String SDK Id for which value has to be return.
///
- (int8_t)getConsentStatusForSDKId:(NSString * _Nonnull)SDKId SWIFT_WARN_UNUSED_RESULT;
/// Method to update consent of all valid categories and SDK id to true and trigger notifications for the same.
- (void)acceptAll;
/// Method to update consent of all valid categories and SDK id to false and trigger notifications for the same.
- (void)rejectAll;
/// Public function to get user location if consent not given OR user consent location if consent was given.
///
/// returns:
/// GeolocationModel containing country, state, stateName, zipcode, timezone, city
- (OTGeolocationModel * _Nonnull)getUserLocation SWIFT_WARN_UNUSED_RESULT;
/// Public function to get complete data
///
/// returns:
/// String containing complete headless contents. Nil if none found.
- (NSString * _Nullable)getOTSDKData SWIFT_WARN_UNUSED_RESULT;
/// Function to override consent logging identifier
/// \param identifier identifier with which current udid has to be overridden with
///
- (void)overrideDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Public function to set  Data Subject Identifier with custom identifier.
/// \param identifier String Identifier which will replace saved Identifier.
///
- (void)setDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Function to get active IAB Vendor List
///
/// returns:
/// Dictionary containing active IAB Vendor List. Nil if none found.
- (NSDictionary<NSString *, id> * _Nullable)getVendorListData SWIFT_WARN_UNUSED_RESULT;
/// Function to control logging level, pass .noLogs to disable the log.
/// \param level Log level which has to be printed on console.
/// Values: .noLogs, .error, .warning, .info, .debug, .verbose.
/// For any valid logLevel passed SDK will log that level and above level. For instance: If level .info is passed, then error, warning and info logs will be printed.
///
- (void)enableOTSDKLog:(enum OTLoggerConstant)level;
/// Public function to clear OneTrust local data
- (void)clearOTSDKData;
/// Public function to save default consent value
- (void)saveDefaultConsentValues;
/// Public fnction to reset updated consent values
- (void)resetUpdatedConsent;
/// Public function to set environment for QA/Development
- (void)setEnviroment:(NSString * _Nonnull)environment;
/// Public function to update consent status for a specific vendor.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated consent status.
///
- (void)updateVendorConsentWithVendorId:(NSInteger)vendorId consentStatus:(BOOL)consentStatus;
/// Public function to update consent value for vendor LegitInterest.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated legitimate interest status.
///
- (void)updateVendorLegitInterestWithVendorId:(NSInteger)vendorId legIntStatus:(BOOL)legIntStatus;
/// Function to get local state of IAB Vendor List
///
/// returns:
///
/// <ul>
///   <li>
///     Dictionary containing local state of active IAB Vendor List if values are updated without save using updateVendorConsent/updateVendorLegitInterest.
///   </li>
///   <li>
///     Returns saved IAB Vendor state stored if nothing changed.
///   </li>
///   <li>
///     Nil if none found.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)getVendorListUI SWIFT_WARN_UNUSED_RESULT;
/// Public function to get vendor details for given vendor id
/// \param vendorId vendor id as Int value
///
///
/// returns:
/// if vendor is available then this function will return a dictionary for given Vendor Id otherwise this function will return nil
- (NSDictionary<NSString *, id> * _Nullable)getVendorDetailsWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct banner user interface
///
/// returns:
/// return banner data dictionary to construct banner UI
- (NSDictionary<NSString *, id> * _Nullable)getBannerData SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct preference center user interface
///
/// returns:
/// return dictionary to construct preference center UI
- (NSDictionary<NSString *, id> * _Nullable)getPreferenceCenterData SWIFT_WARN_UNUSED_RESULT;
/// Public function to setup user interface and show banner or preference center UI  if required (if shouldShowBanner() method return true) after OneTrust data download. Call this method on main view controller.
/// \param viewController pass main view controller reference
///
/// \param type If want to show Banner or Preference center UI just after OneTrust data download then pass OTUIType as .banner to show Banner or pass OTUIType as .preferenceCenter to show Preference Center. If don’t want to show Banner or Preference Center UI just after OneTrust data download then skip second parameter of this method or pass OTUIType as .none
///
- (void)setupUI:(UIViewController * _Nonnull)viewController UIType:(enum OTUIType)UIType;
/// Public function for event listener on any user interaction on OneTrust UI.
/// \param eventListener pass any class object where you want to listen event.
///
- (void)addEventListener:(id _Nonnull)eventListener;
/// Public method to show banner user interface if OneTrust data available. Please call this method after setupUI() method. This method doesn’t consider value of shouldShowBanner(). This method will show banner if OneTrust data is available otherwise it will show alert with message.
- (void)showBannerUI;
/// Public method to show preference center user interface if OneTrust data available. Please call this method after setupUI() method. This method doesn’t consider value of shouldShowBanner(). This method will show preference center if OneTrust data is available otherwise it will show alert with message.
- (void)showPreferenceCenterUI;
/// IAB CCPA
/// Function to initialize CCPA.
/// \param groupId Maps to Preference Center category so SDK knows when and what to update. Default value is “BG13”
///
/// \param LSPACT Boolean value set by customer.
///
/// \param ExplicitNotice Boolean value to be passed by consumer application for now. Will be based on value of flag that indicates if Banner should be shown.
///
- (void)initializeCCPAWithCategoryIDs:(NSArray<NSString *> * _Nonnull)categoryIDs geolocation:(enum OTCCPAGeolocation)geolocation explicitNotice:(BOOL)explicitNotice lsPact:(BOOL)lsPact;
/// Public function to Opt-Out of sale of Data. Toggle Disabled.
- (void)optOutOfSaleOfData;
/// Public function to Opt-Into of sale of Data. Toggle Enabled.
- (void)optIntoSaleOfData;
/// public method to enable write logs to file.
/// \param enable enable write logs to file.
///
/// \param debugLog enable write debug logs to file. Default status is false.
///
- (void)writeLogsToFile:(BOOL)enable debugLog:(BOOL)enableVerbose;
/// Public function to set fetch data url
/// \param urlString URL string value
///
- (void)setFetchDataURL:(NSString * _Nonnull)urlString;
/// Public function to update all vendor consent locally
/// \param isSelected Pass true/false to update all vendor consent to 1/0 locally
///
- (void)updateAllVendorsConsentLocal:(BOOL)isSelected;
/// Function to determine if Banner/Preference center was presented to user at least once.
/// This method will support only if SDK UI methods are used.
///
/// returns:
/// 1 if Banner/Preference Center shown
/// 0 if Banner/Preference Center was not shown yet (implied consent)
/// -1 if SDK not initialized yet
/// 2 if consent taken using profile syncing
- (NSInteger)isBannerShown SWIFT_WARN_UNUSED_RESULT;
@end


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK11OTSdkParams")
@interface OTSdkParams : NSObject
/// Initializer for OTSdkParams
/// \param countryCode String containing a valid country code.
///
/// \param regionCode String containing a valid region code.
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nullable)countryCode regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Public function to set sdk version
/// \param sdkVersion SDK version for which data should be retrieved.
///
- (void)setSDKVersion:(NSString * _Nonnull)sdkVersion;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setProfileSyncParams:(OTProfileSyncParams * _Nonnull)crossDeviceParams;
/// Public function to enable profile creation.
/// \param enabled Boolean to state if profile creation should be enabled or not.
///
- (void)setShouldCreateProfile:(NSString * _Nonnull)shouldCreateProfile;
/// Public function to set OneTrust banner height ratio with screen height
/// \param heightProportion OTBannerHeightRatio enum
///
- (void)setBannerHeightRatio:(enum OTBannerHeightRatio)heightRatio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum for OneTrust user interface
typedef SWIFT_ENUM(NSInteger, OTUIType, open) {
  OTUITypeNone = -1,
  OTUITypeBanner = 0,
  OTUITypePreferenceCenter = 1,
};


/// Struct containing all the UserDefault keys being saved
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK17OTUserDefaultKeys")
@interface OTUserDefaultKeys : NSObject
/// key for complete OTT data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ottData;)
+ (NSString * _Nonnull)ottData SWIFT_WARN_UNUSED_RESULT;
/// key to check whether consent is given or not
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userConsentStatus;)
+ (NSString * _Nonnull)userConsentStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef OTPUBLISHERSHEADLESSSDK_SWIFT_H
#define OTPUBLISHERSHEADLESSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OTPublishersHeadlessSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum for IAB CCPA expected values
typedef SWIFT_ENUM(NSInteger, IabCcpaConsent, open) {
  IabCcpaConsentNotApplicable = 0,
  IabCcpaConsentNo = 1,
  IabCcpaConsentYes = 2,
};


/// Enum for OneTrust banner height
typedef SWIFT_ENUM(NSInteger, OTBannerHeightRatio, open) {
  OTBannerHeightRatioFull = 1,
  OTBannerHeightRatioTwo_third = 2,
  OTBannerHeightRatioOne_half = 3,
};

typedef SWIFT_ENUM(NSInteger, OTCCPAGeolocation, open) {
  OTCCPAGeolocationAll = 0,
  OTCCPAGeolocationUs = 1,
  OTCCPAGeolocationCa = 2,
};


SWIFT_PROTOCOL("_TtP23OTPublishersHeadlessSDK15OTEventListener_")
@protocol OTEventListener
@optional
- (void)onShowBanner;
- (void)onHideBanner;
- (void)onBannerClickedAcceptAll;
- (void)onBannerClickedRejectAll;
- (void)onShowPreferenceCenter;
- (void)onHidePreferenceCenter;
- (void)onPreferenceCenterPurposeConsentChangedWithPurposeId:(NSString * _Nonnull)purposeId consentStatus:(int8_t)consentStatus;
- (void)onPreferenceCenterAcceptAll;
- (void)onPreferenceCenterRejectAll;
- (void)onPreferenceCenterConfirmChoices;
- (void)onPreferenceCenterPurposeLegitimateInterestChangedWithPurposeId:(NSString * _Nonnull)purposeId legitInterest:(int8_t)legitInterest;
- (void)onShowVendorList;
- (void)onHideVendorList;
- (void)onVendorConfirmChoices;
- (void)onVendorListVendorConsentChangedWithVendorId:(NSString * _Nonnull)vendorId consentStatus:(int8_t)consentStatus;
- (void)onVendorListVendorLegitimateInterestChangedWithVendorId:(NSString * _Nonnull)vendorId legitInterest:(int8_t)legitInterest;
@end


SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK18OTGeolocationModel")
@interface OTGeolocationModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Struct for IAB 2.0 TCF UserDefaults keys
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK12OTIABTCFKeys")
@interface OTIABTCFKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkId;)
+ (NSString * _Nonnull)iabTcf2CmpSdkId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkVersion;)
+ (NSString * _Nonnull)iabTcf2CmpSdkVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PolicyVersion;)
+ (NSString * _Nonnull)iabTcf2PolicyVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2GdprApplies;)
+ (NSString * _Nonnull)iabTcf2GdprApplies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCC;)
+ (NSString * _Nonnull)iabTcf2PublisherCC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeOneTreatment;)
+ (NSString * _Nonnull)iabTcf2PurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2UseNonStandardStacks;)
+ (NSString * _Nonnull)iabTcf2UseNonStandardStacks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2TCString;)
+ (NSString * _Nonnull)iabTcf2TCString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorConsents;)
+ (NSString * _Nonnull)iabTcf2VendorConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2VendorLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeConsents;)
+ (NSString * _Nonnull)iabTcf2PurposeConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PurposeLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2SpecialFeaturesOptIns;)
+ (NSString * _Nonnull)iabTcf2SpecialFeaturesOptIns SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherRestrictions;)
+ (NSString * _Nonnull)iabTcf2PublisherRestrictions SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherConsent;)
+ (NSString * _Nonnull)iabTcf2PublisherConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesConsents;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum to keep a state of Log Levels
typedef SWIFT_ENUM(NSInteger, OTLoggerConstant, open) {
  OTLoggerConstantNoLogs = -1,
  OTLoggerConstantError = 1,
  OTLoggerConstantWarning = 2,
  OTLoggerConstantInfo = 3,
  OTLoggerConstantDebug = 4,
  OTLoggerConstantVerbose = 5,
};


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK19OTProfileSyncParams")
@interface OTProfileSyncParams : NSObject
/// Initializer for OTProfileSyncParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setSyncProfile:(NSString * _Nonnull)syncProfile;
/// Public function to pass sync profile auth.
/// \param profileAuth String containing sync profile auth.
///
- (void)setSyncProfileAuth:(NSString * _Nonnull)profileAuth;
/// Public function to set sync group identifier
/// \param groupId String containing sync group identifier.
///
- (void)setSyncGroupId:(NSString * _Nonnull)groupId;
/// Public function to set data subject identifier
/// \param dsid String containing data subject identifier.
///
- (void)setIdentifier:(NSString * _Nonnull)dsid;
/// Public function to set tenant Id
/// \param tenantId tenantId as String value
///
- (void)setTenantId:(NSString * _Nonnull)tenantId;
@end

@class OTSdkParams;
@class UIViewController;
enum OTUIType : NSInteger;

SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK23OTPublishersHeadlessSDK")
@interface OTPublishersHeadlessSDK : NSObject
/// Shared public var to get OneTrust publisher Headless SDK instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OTPublishersHeadlessSDK * _Nonnull shared;)
+ (OTPublishersHeadlessSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Function to fetch data to required to create native OT banner
/// \param storageLocation String containing storage location from where data has to be fetched.
///
/// \param domainIdentifier String containing unique Domain Identifier to be passed. As: “5376c4e0-8367-450c-8669-a0d41bed69ac”
///
/// \param languageCode String containing valid ISO Language code for langauge for which localized data has be fetched. As: “en”
///
/// \param params value containing OTSdkParams optional type for additional SDK parameters like country code and region code
///
/// \param completionHandler Completion Handler containing a Boolean and Error signifying if SDK initialization was successful or not. Error in case initialization failed.
/// Completion will return false status if there is internet connectivity issues, invalid storage url, invalid domain Identifier or invalid language code is passed.
///
- (void)initOTSDKDataWithStorageLocation:(NSString * _Nonnull)storageLocation domainIdentifier:(NSString * _Nonnull)domainIdentifier languageCode:(NSString * _Nonnull)languageCode params:(OTSdkParams * _Nullable)params completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler SWIFT_METHOD_FAMILY(none);
/// Function to signify if banner should be displayed for user location or not.
///
/// returns:
/// Return boolean true if banner should be shown else false.
- (BOOL)shouldShowBanner SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain Data.
///
/// returns:
/// Domain Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainGroupData SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain info.
///
/// returns:
/// Domain dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainInfo SWIFT_WARN_UNUSED_RESULT;
/// Function to get the Common Data.
///
/// returns:
/// Common Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getCommonData SWIFT_WARN_UNUSED_RESULT;
/// Function to update consent value for specified group Identifier.
/// \param groupId String Group Id for which consent value has to be updated.
///
/// \param consentValue Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updatePurposeConsentForGroup:(NSString * _Nonnull)groupId consentValue:(BOOL)consentValue;
/// Function to update legitimate interest value for specified group Identifier.
/// \param groupId String Category Id for which legitimate interest value has to be updated.
///
/// \param legIntValue Boolean value specifying updated legitimate interest value. Permissible values : true or false.
///
- (void)updatePurposeLegitInterestForGroup:(NSString * _Nonnull)groupId legIntValue:(BOOL)legIntValue;
/// Function to get consent value for specified group identifier.
/// \param customGroupId String Purpose Id for which consent value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeConsentLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to get legitimate interest value for specified group identifier.
/// \param customGroupId String Purpose Id for which legitimate interest value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeLegitInterestLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to persist in memory-data to UserDefaults. Confirm my Choices.
- (void)saveConsentValue;
/// Public function to get consent value for specified category Identifier. It will return nil in case of application supplied category id doesn’t exist.
/// \param categoryId String Category Id for which value has to be return.
///
- (int8_t)getConsentStatusForCategory:(NSString * _Nonnull)categoryId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified SDK Identifier. It will return nil in case of application supplied SDK id doesn’t exist.
/// \param SDKId String SDK Id for which value has to be return.
///
- (int8_t)getConsentStatusForSDKId:(NSString * _Nonnull)SDKId SWIFT_WARN_UNUSED_RESULT;
/// Method to update consent of all valid categories and SDK id to true and trigger notifications for the same.
- (void)acceptAll;
/// Method to update consent of all valid categories and SDK id to false and trigger notifications for the same.
- (void)rejectAll;
/// Public function to get user location if consent not given OR user consent location if consent was given.
///
/// returns:
/// GeolocationModel containing country, state, stateName, zipcode, timezone, city
- (OTGeolocationModel * _Nonnull)getUserLocation SWIFT_WARN_UNUSED_RESULT;
/// Public function to get complete data
///
/// returns:
/// String containing complete headless contents. Nil if none found.
- (NSString * _Nullable)getOTSDKData SWIFT_WARN_UNUSED_RESULT;
/// Function to override consent logging identifier
/// \param identifier identifier with which current udid has to be overridden with
///
- (void)overrideDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Public function to set  Data Subject Identifier with custom identifier.
/// \param identifier String Identifier which will replace saved Identifier.
///
- (void)setDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Function to get active IAB Vendor List
///
/// returns:
/// Dictionary containing active IAB Vendor List. Nil if none found.
- (NSDictionary<NSString *, id> * _Nullable)getVendorListData SWIFT_WARN_UNUSED_RESULT;
/// Function to control logging level, pass .noLogs to disable the log.
/// \param level Log level which has to be printed on console.
/// Values: .noLogs, .error, .warning, .info, .debug, .verbose.
/// For any valid logLevel passed SDK will log that level and above level. For instance: If level .info is passed, then error, warning and info logs will be printed.
///
- (void)enableOTSDKLog:(enum OTLoggerConstant)level;
/// Public function to clear OneTrust local data
- (void)clearOTSDKData;
/// Public function to save default consent value
- (void)saveDefaultConsentValues;
/// Public fnction to reset updated consent values
- (void)resetUpdatedConsent;
/// Public function to set environment for QA/Development
- (void)setEnviroment:(NSString * _Nonnull)environment;
/// Public function to update consent status for a specific vendor.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated consent status.
///
- (void)updateVendorConsentWithVendorId:(NSInteger)vendorId consentStatus:(BOOL)consentStatus;
/// Public function to update consent value for vendor LegitInterest.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated legitimate interest status.
///
- (void)updateVendorLegitInterestWithVendorId:(NSInteger)vendorId legIntStatus:(BOOL)legIntStatus;
/// Function to get local state of IAB Vendor List
///
/// returns:
///
/// <ul>
///   <li>
///     Dictionary containing local state of active IAB Vendor List if values are updated without save using updateVendorConsent/updateVendorLegitInterest.
///   </li>
///   <li>
///     Returns saved IAB Vendor state stored if nothing changed.
///   </li>
///   <li>
///     Nil if none found.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)getVendorListUI SWIFT_WARN_UNUSED_RESULT;
/// Public function to get vendor details for given vendor id
/// \param vendorId vendor id as Int value
///
///
/// returns:
/// if vendor is available then this function will return a dictionary for given Vendor Id otherwise this function will return nil
- (NSDictionary<NSString *, id> * _Nullable)getVendorDetailsWithVendorId:(NSInteger)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct banner user interface
///
/// returns:
/// return banner data dictionary to construct banner UI
- (NSDictionary<NSString *, id> * _Nullable)getBannerData SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct preference center user interface
///
/// returns:
/// return dictionary to construct preference center UI
- (NSDictionary<NSString *, id> * _Nullable)getPreferenceCenterData SWIFT_WARN_UNUSED_RESULT;
/// Public function to setup user interface and show banner or preference center UI  if required (if shouldShowBanner() method return true) after OneTrust data download. Call this method on main view controller.
/// \param viewController pass main view controller reference
///
/// \param type If want to show Banner or Preference center UI just after OneTrust data download then pass OTUIType as .banner to show Banner or pass OTUIType as .preferenceCenter to show Preference Center. If don’t want to show Banner or Preference Center UI just after OneTrust data download then skip second parameter of this method or pass OTUIType as .none
///
- (void)setupUI:(UIViewController * _Nonnull)viewController UIType:(enum OTUIType)UIType;
/// Public function for event listener on any user interaction on OneTrust UI.
/// \param eventListener pass any class object where you want to listen event.
///
- (void)addEventListener:(id _Nonnull)eventListener;
/// Public method to show banner user interface if OneTrust data available. Please call this method after setupUI() method. This method doesn’t consider value of shouldShowBanner(). This method will show banner if OneTrust data is available otherwise it will show alert with message.
- (void)showBannerUI;
/// Public method to show preference center user interface if OneTrust data available. Please call this method after setupUI() method. This method doesn’t consider value of shouldShowBanner(). This method will show preference center if OneTrust data is available otherwise it will show alert with message.
- (void)showPreferenceCenterUI;
/// IAB CCPA
/// Function to initialize CCPA.
/// \param groupId Maps to Preference Center category so SDK knows when and what to update. Default value is “BG13”
///
/// \param LSPACT Boolean value set by customer.
///
/// \param ExplicitNotice Boolean value to be passed by consumer application for now. Will be based on value of flag that indicates if Banner should be shown.
///
- (void)initializeCCPAWithCategoryIDs:(NSArray<NSString *> * _Nonnull)categoryIDs geolocation:(enum OTCCPAGeolocation)geolocation explicitNotice:(BOOL)explicitNotice lsPact:(BOOL)lsPact;
/// Public function to Opt-Out of sale of Data. Toggle Disabled.
- (void)optOutOfSaleOfData;
/// Public function to Opt-Into of sale of Data. Toggle Enabled.
- (void)optIntoSaleOfData;
/// public method to enable write logs to file.
/// \param enable enable write logs to file.
///
/// \param debugLog enable write debug logs to file. Default status is false.
///
- (void)writeLogsToFile:(BOOL)enable debugLog:(BOOL)enableVerbose;
/// Public function to set fetch data url
/// \param urlString URL string value
///
- (void)setFetchDataURL:(NSString * _Nonnull)urlString;
/// Public function to update all vendor consent locally
/// \param isSelected Pass true/false to update all vendor consent to 1/0 locally
///
- (void)updateAllVendorsConsentLocal:(BOOL)isSelected;
/// Function to determine if Banner/Preference center was presented to user at least once.
/// This method will support only if SDK UI methods are used.
///
/// returns:
/// 1 if Banner/Preference Center shown
/// 0 if Banner/Preference Center was not shown yet (implied consent)
/// -1 if SDK not initialized yet
/// 2 if consent taken using profile syncing
- (NSInteger)isBannerShown SWIFT_WARN_UNUSED_RESULT;
@end


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK11OTSdkParams")
@interface OTSdkParams : NSObject
/// Initializer for OTSdkParams
/// \param countryCode String containing a valid country code.
///
/// \param regionCode String containing a valid region code.
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nullable)countryCode regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Public function to set sdk version
/// \param sdkVersion SDK version for which data should be retrieved.
///
- (void)setSDKVersion:(NSString * _Nonnull)sdkVersion;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setProfileSyncParams:(OTProfileSyncParams * _Nonnull)crossDeviceParams;
/// Public function to enable profile creation.
/// \param enabled Boolean to state if profile creation should be enabled or not.
///
- (void)setShouldCreateProfile:(NSString * _Nonnull)shouldCreateProfile;
/// Public function to set OneTrust banner height ratio with screen height
/// \param heightProportion OTBannerHeightRatio enum
///
- (void)setBannerHeightRatio:(enum OTBannerHeightRatio)heightRatio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum for OneTrust user interface
typedef SWIFT_ENUM(NSInteger, OTUIType, open) {
  OTUITypeNone = -1,
  OTUITypeBanner = 0,
  OTUITypePreferenceCenter = 1,
};


/// Struct containing all the UserDefault keys being saved
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK17OTUserDefaultKeys")
@interface OTUserDefaultKeys : NSObject
/// key for complete OTT data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ottData;)
+ (NSString * _Nonnull)ottData SWIFT_WARN_UNUSED_RESULT;
/// key to check whether consent is given or not
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userConsentStatus;)
+ (NSString * _Nonnull)userConsentStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
